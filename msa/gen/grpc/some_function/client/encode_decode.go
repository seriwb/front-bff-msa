// Code generated by goa v3.0.4, DO NOT EDIT.
//
// some-function gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/seriwb/front-bff-msa/msa/design

package client

import (
	"context"

	some_functionpb "github.com/seriwb/front-bff-msa/msa/gen/grpc/some_function/pb"
	somefunction "github.com/seriwb/front-bff-msa/msa/gen/some_function"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAddFunc builds the remote method to invoke for "some-function" service
// "add" endpoint.
func BuildAddFunc(grpccli some_functionpb.SomeFunctionClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*some_functionpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &some_functionpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to some-function add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*somefunction.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("some-function", "add", "*somefunction.AddPayload", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the some-function add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*some_functionpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("some-function", "add", "*some_functionpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}
